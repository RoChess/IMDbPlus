<ScriptableScraper>
	<details>
		<!-- These details are for display purposes only. -->
		<name>IMDb+</name>
		<author>Ron (RoChess)</author>
		<description>Combination scraper, using the best data from IMDb and RottenTomatoes.</description>

	<!-- Replace the following with <id>874902</id> to avoid having to re-import your collection. -->
		<id>314159265</id>
	<!-- This will fool MovingPictures into thinking this scraper is the new imdb.com scraper. -->

		<version major="3" minor="0" point="9" />
		<published month="03" day="28" year="2011" />
		<type>MovieDetailsFetcher|MovieCoverFetcher</type>
		<language>en</language>
	</details>
  

<!-- Global Options -->

	<!--
	It is not yet possible to configure options for a scraper script.
	So please star issue: http://code.google.com/p/moving-pictures/issues/detail?id=319

	This means that you have to manually change the global_options... below.

	Adjust all of them to your liking *BEFORE* importing this scraper script

	Use *ONLY* value="true" or value="false" to make sure that everything works
	-->


<!-- Details Node -->

	<action name="get_details">

		<!-- ### OPTIONS ### -->						<!--       TRUE		|         FALSE		-->
			<set name="global_options_original_title" value="false" />	<!-- Original Title	| Always English Title	-->
			<set name="global_options_foreign_title" value="false" />	<!-- English (Original)	| Main title only	-->
			<set name="global_options_uk_rating" value="false" />		<!-- UK certification	| US certification	-->
			<set name="global_options_imdb_score" value="false" />		<!-- Use IMDb.com	| RottenTomatoes.com	-->
			<set name="global_options_imdb_metascore" value="false" />	<!-- IMDb score		| Metacritics metascore	-->
			<set name="global_options_long_summary" value="false" /> 	<!-- Long summary	| Short summary		-->
			<set name="global_options_rotten_meter" value="false" /> 	<!-- TomatoMeter	| Audience		-->
			<set name="global_options_rotten_average" value="false" />	<!-- Average value	| Percentage value	-->
			<set name="global_options_rotten_top_critics" value="false" />	<!-- Top critics meter	| All critics meter	-->

			<!--
				Special filter to include other language titles besides English (en)
				Use the imdb.com HTML source to find the ISO 639-1 code after /language/

				example for English + Norwegian + Swedish would be value="en|no|sv"
			-->
			<set name="global_options_language_filter" value="en" />
		<!-- ### OPTIONS ### -->

		<!-- if the site id is not set try to set it using the imdb id -->
		<if test="${movie.site_id}=">
			<if test="${movie.imdb_id}!=">
				<set name="movie.site_id" value="${movie.imdb_id}" />
			</if>
		</if>

		<!-- if we have a site id (imdb id) we can continue -->
		<if test="${movie.site_id}!=">

			<set name="site" value="http://akas.imdb.com/title/${movie.site_id}" />
			<retrieve name="details_page" url="${site}" />

			<set name="movie.imdb_id" value="${movie.site_id}" />

			<!-- clear SortBy, so that it can be properly redone by the plugin afterwards -->
			<!-- this is to ensure article removal when there is a forced English title change -->
			<set name="movie.sortby" value="" />

			<!-- Title and Year -->
			<if test="${global_options_original_title}=true">
				<set name="rx_title_year">
					<![CDATA[
					<title>(?<movieTitle>[^\(]+?)\s*\((?<movieYear>\d{4})[\/IVX]*\).*?</title>
					]]>
				</set>
			</if>
			<if test="${global_options_original_title}=false">
				<set name="rx_tmp_prefix">
					<![CDATA[
					<title>(?<movieTitleEnglish>(?:(?=.+?<h4 class="inline">Language:</h4>\s*<a href="/language/
					]]>
				</set>
				<set name="rx_tmp_postfix">
					<![CDATA[
					")|(?!.+?<a href="releaseinfo#akas">))[^\(]+?)\s*\(\D*(?<movieYear>\d{4})[\/IVX]*\).*?</title>
					]]>
				</set>
				<set name="rx_title_year" value="${rx_tmp_prefix}(?:${global_options_language_filter})${rx_tmp_postfix}" />
			</if>
			<parse name="title_year" input="${details_page}" regex="${rx_title_year}" />
			<set name="movie.title" value="${title_year[0][0]:htmldecode}" />
			<set name="movie.year" value="${title_year[0][1]:htmldecode}" />

			<!-- Directors -->
			<set name="rx_directors_block">
				<![CDATA[
				<h5>Director[s]?:</h5>(?<directors_block>.*?)</div>|Director[s]?:\s*</h4>[^<]*(?<directors_block>.*?)</div>
				]]>
			</set>
			<set name="rx_directors">
				<![CDATA[
				<a\s+href="/name/nm\d{7}/"[^>]*>(?<movieDirectors>[^<]+)</a>
				]]>
			</set>
			<parse name="directors_block" input="${details_page}" regex="${rx_directors_block}" />
			<parse name="directors" input="${directors_block}" regex="${rx_directors}" />
			<set name="movie.directors" value='' />
			<loop name="currDirector" on="directors">
				<set name="movie.directors" value="${movie.directors}|${currDirector[0]:htmldecode}" />
			</loop>

			<!-- Writers -->
			<set name="rx_writers_block">
				<![CDATA[
				<h5>Writer[s]?.*?<div class="info-content">.*?(?<writers_block>.*?)</div>|Writer[s]?:\s*</h4>[^<]*(?<writers_block>.*?)</div>
				]]>
			</set>
			<set name="rx_writers">
				<![CDATA[
				<a\s+href="/name/nm\d{7}/"[^>]*>(?<movieWriters>[^<]+)</a>
				]]>
			</set>
			<parse name="writers_block" input="${details_page}" regex="${rx_writers_block}" />
			<parse name="writers" input="${writers_block}" regex="${rx_writers}" />
			<set name="movie.writers" value='' />
			<loop name="currWriter" on="writers">
				<set name="movie.writers" value="${movie.writers}|${currWriter[0]:htmldecode}" />
			</loop>

			<!-- Actors -->
			<set name="rx_actors_block">
				<![CDATA[
				<div class="headerinline"><h3>Cast</h3>(?<cast_block>.+?)<h3>Additional Details</h3>|<h2>Cast</h2>(?<cast_block>.+?)<h2>Details</h2>
				]]>
			</set>
			<set name="rx_actors">
				<![CDATA[
				<td[^<]*<a\s+href="/name/nm\d{7}/"[^>]*>(?<movieActors>[^<]*)</a>
				]]>
			</set>
			<parse name="actors_block" input="${details_page}" regex="${rx_actors_block}" />
			<parse name="actors" input="${actors_block}" regex="${rx_actors}" />
			<set name="movie.actors" value='' />
			<loop name="currActor" on="actors">
				<set name="movie.actors" value="${movie.actors}|${currActor[0]:htmldecode}" />
			</loop>

			<!-- Genres -->
			<set name="rx_genres_block">
				<![CDATA[
				<h5>Genre:</h5>(?<genres_block>.+?)</div>|Genre[s]?:[^<]*</h4>(?<genres_block>.+?)</div>
				]]>
			</set>
			<set name="rx_genres">
				<![CDATA[
				<a href="(?:/Sections)?/[Gg]enre[s]?/[^/]+/?">(?<movieGenres>.+?)</a>
				]]>
			</set>
			<parse name="genres_block" input="${details_page}" regex="${rx_genres_block}" />
			<parse name="genres" input="${genres_block}" regex="${rx_genres}" />
			<set name="movie.genres" value='' />
			<loop name="currGenre" on="genres">
				<set name="movie.genres" value="${movie.genres}|${currGenre[0]:htmldecode}" />
			</loop>

			<!-- Certification -->
			<if test="${global_options_uk_rating}=true">
				<set name="rx_certification">
					<![CDATA[
					(?:>\s*UK:|Rated\s*?)(?<movieCertification>(?:U)|(?:PG)|(?:12)|(?:12A)|(?:15)|(?:18)|(?:R18))(?:</a>|\s*?for)
					]]>
				</set>
			</if>
			<if test="${global_options_uk_rating}=false">
				<set name="rx_certification">
					<![CDATA[
					(?:>\s*USA:|Rated\s*?)(?<movieCertification>(?:G)|(?:PG)|(?:PG-13)|(?:R)|(?:X)|(?:NC-17))(?:</a>|\s*?for)
					]]>
				</set>
			</if>
			<parse name="certification" input="${details_page}" regex="${rx_certification}" />
			<set name="movie.certification" value="${certification[0][0]:htmldecode}" />
			<if test="${movie.certification}=">
				<retrieve name="parentalguide_page" url="${site}/parentalguide" />
				<parse name="certification" input="${parentalguide_page}" regex="${rx_certification}" />
				<set name="movie.certification" value="${certification[0][0]:htmldecode}" />
			</if>

			<!-- Runtime -->
			<set name="rx_runtime">
				<![CDATA[
				<h5>Runtime:</h5>.*?(?<movieRuntime>\d+) min\s+|(?<movieRuntime>\d+) min&nbsp;&nbsp;-&nbsp;&nbsp;
				]]>
			</set>
			<parse name="runtime" input="${details_page}" regex="${rx_runtime}" />
			<set name="movie.runtime" value="${runtime[0][0]:htmldecode}" />

			<!-- Tagline -->
			<set name="rx_tagline">
				<![CDATA[
				<h5>Tagline.</h5>[^>]+>[^\r]?(?<movieTagline>[^<]+)|Tagline[s]?:</h4>[\s\f\r]*(?<movieTagline>[^<]+)
				]]>
			</set>
			<parse name="tagline" input="${details_page}" regex="${rx_tagline}" />
			<set name="movie.tagline" value="${tagline[0][0]:htmldecode}" />

		<!-- START: global_options_imdb_score -->
			<!-- IMDb -->
			<if test="${global_options_imdb_score}=true">
				<!-- metacritics.com metascore + votes -->
				<if test="${global_options_imdb_metascore}=true">
					<set name="rx_score">
						<![CDATA[
						<span class="nobr">Metascore:\s*<strong>(?<movieScore>\d+)</strong><span class="mellow">/100</span>
						]]>
					</set>
					<!-- Fix metascore to scale of 10 -->
					<parse name="score" input="${details_page}" regex="${rx_score}" />
					<divide name="metascore_rating_float" value1="${score[0][0]:htmldecode}" value2="10" result_type="float" />
					<set name="movie.score" value="${metascore_rating_float}" />

					<set name="rx_popularity">
						<![CDATA[
						"criticreviews"[^>]+>(?<moviePopularity>[^\s]+) reviews</a>
						]]>
					</set>
				</if>
				<!-- imdb.com score + votes -->
				<if test="${global_options_imdb_metascore}=false">
					<set name="rx_score">
						<![CDATA[
						<b>(?<movieScore>\d+.\d+)/10</b>|<span[^<]*>(?<movieScore>\d+.\d+)<span>/10</span>
						]]>
					</set>
					<parse name="score" input="${details_page}" regex="${rx_score}" />
					<set name="movie.score" value="${score[0][0]:htmldecode}" />

					<set name="rx_popularity">
						<![CDATA[
						"ratings"[^>]+>(?<moviePopularity>[^\s]+) votes</a>
						]]>
					</set>
				</if>

				<!-- Popularity -->
				<parse name="votes" input="${details_page}" regex="${rx_popularity}" />
				<replace name="votes_clean1" input="${votes[0][0]:htmldecode}" pattern="\," with='' />
				<replace name="votes_clean2" input="${votes_clean1}" pattern="\." with='' />
				<set name="movie.popularity" value="${votes_clean2}" />
			</if>

			<!-- RottenTomatoes -->
			<if test="${global_options_imdb_score}=false">
				<!-- Adjust IMDb ID to be compatible with RottenTomatoes -->
				<replace name="imdb_id_fixed" input="${movie.imdb_id}" pattern="tt" with="" />
				<!-- Retrieve detail page from RottenTomatoes -->
				<retrieve name="rotten_details" url="http://www.rottentomatoes.com/alias?type=imdbid&amp;s=${imdb_id_fixed}" />

				<!-- Obtain TomatoMeter rating -->
				<if test="${global_options_rotten_meter}=true">
					<set name="rx_rotten_tomatometer">
						<![CDATA[
						<span id="all-critics-meter"[^>]+>(?<rtPercentage>\d{1,3}?)</span>.+?<p class="critic_stats">\D*(?<rtAverage>\d+\.\d+)/10\D*(?<rtVotes>\d+)
						]]>
					</set>
					<parse name="rotten_rating" input="${rotten_details}" regex="${rx_rotten_tomatometer}" />

					<!-- Obtain TomatoMeter average rating -->
					<if test="${global_options_rotten_average}=true">
						<if test="${global_options_rotten_top_critics}=true">
							<set name="movie.score" value="${rotten_rating[1][1]:htmldecode}" />
							<set name="votes" value="${rotten_rating[1][2]:htmldecode}" />
						</if>
						<if test="${global_options_rotten_top_critics}=false">
							<set name="movie.score" value="${rotten_rating[0][1]:htmldecode}" />
							<set name="votes" value="${rotten_rating[0][2]:htmldecode}" />
						</if>
					</if>

					<!-- Obtain TomatoMeter percentage rating -->
					<if test="${global_options_rotten_average}=false">
						<!-- Avoid divide by zero problem -->
						<if test="${rotten_rating}!=">
							<if test="${global_options_rotten_top_critics}=true">
								<!-- Fix TomatoMeter to scale of 10 -->
								<divide name="rotten_rating_float" value1="${rotten_rating[1][0]:htmldecode}" value2="10" result_type="float" />
								<set name="votes" value="${rotten_rating[1][2]:htmldecode}" />
							</if>
							<if test="${global_options_rotten_top_critics}=false">
								<!-- Fix TomatoMeter to scale of 10 -->
								<divide name="rotten_rating_float" value1="${rotten_rating[0][0]:htmldecode}" value2="10" result_type="float" />
								<set name="votes" value="${rotten_rating[0][2]:htmldecode}" />
							</if>
							<set name="movie.score" value="${rotten_rating_float}" />
						</if>
					</if>

					<!-- Popularity RottenTomatoes TomatoMeter -->
					<replace name="votes_clean1" input="${votes}" pattern="\," with='' />
					<replace name="votes_clean2" input="${votes_clean1}" pattern="\." with='' />
					<set name="movie.popularity" value="${votes_clean2}" />
				</if>

				<!-- Obtain Audience rating -->
				<if test="${global_options_rotten_meter}=false">
					<set name="rx_rotten_audience">
						<![CDATA[
						<span class="meter popcorn numeric ">(?<rtPercentage>\d{1,3}?)</span>.+?<p class="critic_stats">\D*(?<rtAverage>\d+\.\d+)/5\D*(?<rtVotes>\d+[,.]?\d+)
						]]>
					</set>
					<parse name="rotten_rating" input="${rotten_details}" regex="${rx_rotten_audience}" />

					<!-- Obtain Audience average rating -->
					<if test="${global_options_rotten_average}=true">
						<!-- Score (multiplied by 2 to match IMDb rating of 10) -->
						<multiply name="score_fixed" value1="${rotten_rating[0][1]:htmldecode}" value2="2" result_type="float" />
						<set name="movie.score" value="${score_fixed}" />
					</if>

					<!-- Obtain Audience percentage rating -->
					<if test="${global_options_rotten_average}=false">
						<if test="${rotten_rating}!=">
							<!-- Fix TomatoMeter to scale of 10 -->
							<divide name="rotten_rating_float" value1="${rotten_rating[0][0]:htmldecode}" value2="10" result_type="float" />
							<set name="movie.score" value="${rotten_rating_float}" />
						</if>
					</if>

					<!-- Popularity RottenTomatoes Audience -->
					<replace name="votes_clean1" input="${rotten_rating[0][2]:htmldecode}" pattern="\," with='' />
					<replace name="votes_clean2" input="${votes_clean1}" pattern="\." with='' />
					<set name="movie.popularity" value="${votes_clean2}" />
				</if>
			</if>
		<!-- END: global_options_imdb_score -->

			<!-- Language -->
			<set name="rx_language">
				<![CDATA[
				<a\shref=./Sections/Languages/[^/]+/?">\s*(?<movieLanguage>[^<]+)</a>|<a\shref=./language/[^"]+">(?<movieLanguage>[^<]+)</a>
				]]>
			</set>
			<parse name="language" input="${details_page}" regex="${rx_language}" />
			<set name="movie.language" value="${language[0][0]:htmldecode}" />

		<!-- START: global_options_long_summary -->
			<set name="rx_plot">
				<![CDATA[
				<p class="plotpar">\s*(?<moviePlotLong>.*?)<i>.*?</i>.*?</p>|<h5>Plot Synopsis:</h5>[^>]+>\s*(?<moviePlotLong>.*?)\s*<a
				]]>
			</set>
			<set name="rx_plot2">
				<![CDATA[
				<h5>Plot:</h5>[^>]+>\s+?(?<moviePlotShort>.*?)(?: \|)?\s+?<a|Users:.*?<p>(?<moviePlotShort>[^<]+?)\s*</p>\s*</p>|<h2>Storyline</h2>\s*<p>(?<moviePlotShort>[^<]+?)\s*<
				]]>
			</set>

			<!-- Long Plot Summary -->
			<if test="${global_options_long_summary}=true">
				<retrieve name="summary_page" url="${site}/plotsummary" />
				<parse name="summary" input="${summary_page}" regex="${rx_plot}" />
				<set name="summary_clean" value="${summary[0][0]:striptags}" />
				<set name="movie.summary" value="${summary_clean:htmldecode}" />

				<!-- Use short Plot Summary if no long plot exists -->
				<if test="${movie.summary}=">
					<parse name="summary2" input="${details_page}" regex="${rx_plot2}" />
					<set name="summary_clean" value="${summary2[0][0]:striptags}" />
					<set name="movie.summary" value="${summary_clean:htmldecode}" />
				</if>
			</if>

			<!-- Short Plot Summary -->
			<if test="${global_options_long_summary}=false">
				<parse name="summary2" input="${details_page}" regex="${rx_plot2}" />
				<set name="summary_clean" value="${summary2[0][0]:striptags}" />
				<set name="movie.summary" value="${summary_clean:htmldecode}" />
			</if>
		<!-- END: global_options_long_summary -->

			<!-- AKA page -->
			<set name="rx_aka">
				<![CDATA[
				<tr>\s+?<td>(.+?)</td>\s+?<td>(.+?)</td>.*?</tr>
				]]>
			</set>
			<retrieve name="aka_page" url="${site}/releaseinfo" />
			<parse name="akas" input="${aka_page}" regex="${rx_aka}" />
			<set name="movie.alternate_titles" value="" />
			<loop name="currAka" on="akas" limit="50">
				<set name="movie.alternate_titles" value="${movie.alternate_titles}|${currAka[0]:htmldecode}" />
			</loop>

			<!-- Find English title on AKA page if we failed to get one at the beginning -->
			<if test="${title_year[0][0]}=">
				<!-- Checking for USA title first -->
				<if test="${global_options_uk_rating}=false">
					<set name="rx_aka_english">
						<![CDATA[
						<title>(?<movieTitleOriginal>[^\(]+?)\s*\(\D*(?<movieYear>\d{4})[\/IVX]*\).*?</title>.+?<h5><a name="akas">Also Known As \(AKA\)</a></h5>.*?<td>(?<movieTitleEnglish>[^<]+)</td>\s*<td>[^<]*(?:USA(?!\s*\(working title\)))[^<]*</td>.*?</table>
						]]>
					</set>
					<parse name="title_year" input="${aka_page}" regex="${rx_aka_english}" />
				</if>
				<if test="${title_year[0][0]}=">
					<!-- Checking for International English title -->
					<set name="rx_aka_english">
						<![CDATA[
						<title>(?<movieTitleOriginal>[^\(]+?)\s*\(\D*(?<movieYear>\d{4})[\/IVX]*\).*?</title>.+?<h5><a name="akas">Also Known As \(AKA\)</a></h5>.*?<td>(?<movieTitleEnglish>[^<]+)</td>\s*<td>[^<]*International[^<]*</td>.*?</table>
						]]>
					</set>
					<parse name="title_year" input="${aka_page}" regex="${rx_aka_english}" />

					<if test="${title_year[0][0]}=">
						<!-- Locate English 'Hong Kong' title -->
						<set name="rx_aka_english">
							<![CDATA[
							<title>(?<movieTitleOriginal>[^\(]+?)\s*\(\D*(?<movieYear>\d{4})[\/IVX]*\).*?</title>.+?<h5><a name="akas">Also Known As \(AKA\)</a></h5>.+?<td>(?<movieTitleEnglish>[^<]+)</td>\s*<td>Hong Kong[^<]*English[^<]*</td>.*?</table>
							]]>
						</set>
						<parse name="title_year" input="${aka_page}" regex="${rx_aka_english}" />

						<if test="${title_year[0][0]}=">
							<!-- Accepting any remaining English title -->
							<set name="rx_aka_english">
								<![CDATA[
								<title>(?<movieTitleOriginal>[^\(]+?)\s*\(\D*(?<movieYear>\d{4})[\/IVX]*\).*?</title>.+?<h5><a name="akas">Also Known As \(AKA\)</a></h5>.+?<td>(?<movieTitleEnglish>[^<]+)</td>\s*<td>[^<]*English[^<]*</td>.*?</table>
								]]>
							</set>
							<parse name="title_year" input="${aka_page}" regex="${rx_aka_english}" />
	
							<if test="${global_options_uk_rating}=true">
								<if test="${title_year[0][0]}=">
									<!-- Give USA title one last chance for UK users -->
									<set name="rx_aka_english">
										<![CDATA[
										<title>(?<movieTitleOriginal>[^\(]+?)\s*\(\D*(?<movieYear>\d{4})[\/IVX]*\).*?</title>.+?<h5><a name="akas">Also Known As \(AKA\)</a></h5>.*?<td>(?<movieTitleEnglish>[^<]+)</td>\s*<td>[^<]*(?:USA(?!\s*\(working title\)))[^<]*</td>.*?</table>
										]]>
									</set>
									<parse name="title_year" input="${aka_page}" regex="${rx_aka_english}" />
								</if>
							</if>

							<if test="${title_year[0][0]}=">
								<!-- Last resort by looking for (undefined) titles -->
								<set name="rx_aka_english">
									<![CDATA[
									<title>(?<movieTitleOriginal>[^\(]+?)\s*\(\D*(?<movieYear>\d{4})[\/IVX]*\).*?</title>.+?<h5><a name="akas">Also Known As \(AKA\)</a></h5>.+?<td>(?<movieTitleEnglish>[^<]+)</td>\s*<td>[^<]*undefined[^<]*</td>.*?</table>
									]]>
								</set>
								<parse name="title_year" input="${aka_page}" regex="${rx_aka_english}" />
	
								<if test="${title_year[0][0]}=">
									<!-- Giving up, and using the AKA title -->
									<set name="rx_aka_english">
										<![CDATA[
										<title>(?<movieTitleOriginal>[^\(]+?)\s*\(\D*(?<movieYear>\d{4})[\/IVX]*\).*?</title>.*?<meta name="title" content="(?<movieTitleEnglish>[^\(]+?)\s*\(
										]]>
									</set>
									<parse name="title_year" input="${aka_page}" regex="${rx_aka_english}" />
								</if>
							</if>
						</if>
					</if>
				</if>
				<!-- the title_year array is in reverse on the AKA page -->
				<if test="${global_options_foreign_title}=false">
					<set name="movie.title" value="${title_year[0][2]:htmldecode}" />
				</if>
				<if test="${global_options_foreign_title}=true">
					<set name="movie.title" value="${title_year[0][2]:htmldecode} (${title_year[0][0]:htmldecode})" />
				</if>
				<set name="movie.year" value="${title_year[0][1]:htmldecode}" />
			</if>

			<!-- Details URL -->
			<set name="movie.details_url" value="${site}" />
		</if>
	</action>


<!-- Search Node -->
  
	<action name="search">
	
		<set name="offset" value="0" />
		
		<!-- Regular Expressions -->
		<set name="rx_details_page_block">
			<![CDATA[
			<title>.+?\(\D*\d{4}[\/IVX]*\).*?</title>.+</body>
			]]>
		</set>
		<set name="rx_title_year">
			<![CDATA[
			<title>(.+?)\(\D*(\d{4})[\/IVX]*\).*?</title>
			]]>
		</set>

		<!-- Retrieve result using IMDB id (if provided) -->
		<if test="${search.imdb_id}!=">
			<retrieve name="imdb_page" url="http://akas.imdb.com/find?s=tt;q=${search.imdb_id}" />
			<parse name="details_page_block" input="${imdb_page}" regex="${rx_details_page_block}" />
			<loop name="imdb_page" on="details_page_block">
				<parse name="title_year" input="${imdb_page}" regex="${rx_title_year}" />
				<set name="movie[0].title" value="${title_year[0][0]:htmldecode}" />
				<set name="movie[0].year" value="${title_year[0][1]:htmldecode}" />
				<parse name="imdb" input="${imdb_page}" regex="(tt\d{7})/fullcredits" />
				<set name="movie[0].imdb_id" value="${imdb[0][0]}" />
				<set name="movie[0].site_id" value="${imdb[0][0]}" />
				<set name="movie[0].popularity" value="100" />
				<set name="offset" value="1" />
			</loop>
		</if>

		<set name="rx_aka_details">
			<![CDATA[
			<tr>\s+?<td>(.+?)</td>\s+?<td>(.+?)</td>.*?</tr>
			]]>
		</set>
		<set name="rx_aka">
			<![CDATA[
			aka "(.+?)"
			]]>
		</set>

		<!-- Retrieve other results using "Title (year)" -->

		<set name="query_year" value='' />
		<if test="${search.year}>1800">
			<set name="query_year" value="+(${search.year})" />
		</if>

		<retrieve name="search_page" url="http://akas.imdb.com/find?s=tt;q=${search.title:safe(ISO-8859-1)}${query_year}" />

		<!-- if we got a details page, this is used. if not, regex does not match so we dont process the loop-->
		<parse name="details_page_block" input="${search_page}" regex="${rx_details_page_block}" />
		<loop name="details_page_verified" on="details_page_block">
			<add name="counter" value1="${count}" value2="${offset}" />
			<parse name="title_year" input="${details_page_verified}" regex="${rx_title_year}" />
			<set name="movie[${counter}].title" value="${title_year[0][0]:htmldecode}" />
			<set name="movie[${counter}].year" value="${title_year[0][1]:htmldecode}" />
			<parse name="imdb" input="${details_page_verified}" regex="(tt\d{7})/fullcredits" />
			<set name="movie[${counter}].imdb_id" value="${imdb[0][0]}" />
			<set name="movie[${counter}].site_id" value="${imdb[0][0]}" />

			<!-- AKA page -->
			<retrieve name="aka_page" url="http://akas.imdb.com/title/${imdb[0][0]}/releaseinfo" />
			<parse name="akas" input="${aka_page}" regex="${rx_aka_details}" />
			<set name="movie[${counter}].alternate_titles" value="" />
			<loop name="currAka" on="akas" limit="50">
				<set name="movie[${counter}].alternate_titles" value="${movie[${counter}].alternate_titles}|${currAka[0]:htmldecode}" />
			</loop>

			<subtract name="movie[${counter}].popularity" value1="100" value2="${counter}" />
		</loop>

		<set name="rx_search_page">
			<![CDATA[
			<meta name="title" content="IMDb Title Search">.+</body>
			]]>
		</set>

		<!-- if we got a search result page, this is used. if not, regex does not match so we dont process the outer loop. -->
		<parse name="search_results_block" input="${search_page}" regex="${rx_search_page}" />
		<if test="${search_results_block}!=">

			<set name="rx_title_exact_match">
				<![CDATA[
				<p><b>Popular Titles</b> \(Displaying \d{2} Results\).*?<p><b>Titles \(Exact Matches\)</b>.*?>\d+\.<.*?><a href="/title/(tt\d{7})/".*?>(.+?)</a> \((\d{4})\)
				]]>
			</set>

			<!-- to prevent an exact title match from being burried by popular matches, lets grab the first exact title match result -->
			<parse name="title_exact_match" input="${search_results_block}" regex="${rx_title_exact_match}" />
			<if test="${title_exact_match}!=">
				<set name="movie[0].imdb_id" value="${title_exact_match[0][0]:htmldecode}" />
				<set name="movie[0].site_id" value="${title_exact_match[0][0]:htmldecode}" />
				<set name="movie[0].title" value="${title_exact_match[0][1]:htmldecode}" />
				<set name="movie[0].year" value="${title_exact_match[0][2]:htmldecode}" />
				<set name="movie[0].popularity" value="100" />
				<set name="offset" value="1" />
			</if>

			<set name="rx_search_results">
				<![CDATA[
				><a href="/title/(tt\d{7})/"[^>]+>(?!&#34;)([^<]+)</a> \((\d{4})[\/IVX]*\)(?! \(VG\))(?:[^<].*?>(?=aka ")?(.+?)?</td>)?
				]]>
			</set>

			<!-- process the rest of the search page and obtain all the popular results -->
			<loop name="search_results_verified" on="search_results_block">
				<parse name="movie_details" input="${search_results_verified}" regex="${rx_search_results}" />
				<loop name="curr_details" on="movie_details">
					<add name="counter" value1="${count}" value2="${offset}" />
					<set name="movie[${counter}].imdb_id" value="${curr_details[0]:htmldecode}" />
					<set name="movie[${counter}].site_id" value="${curr_details[0]:htmldecode}" />
					<set name="movie[${counter}].title" value="${curr_details[1]:htmldecode}" />

					<parse name="akas" input="${curr_details[3]:htmldecode}" regex="${rx_aka}" />
					<set name="movie[${counter}].alternate_titles" value="" />
					<loop name="currAka" on="akas" limit="50">
						<set name="movie[${counter}].alternate_titles" value="${movie[${counter}].alternate_titles}|${currAka[0]}" />
					</loop>

					<set name="movie[${counter}].year" value="${curr_details[2]:htmldecode}" />
					<subtract name="movie[${counter}].popularity" value1="100" value2="${counter}" />
				</loop>
			</loop>
		</if>
	</action>


<!-- Covers Node -->

	<action name="get_cover_art">
		<!-- if the site id is not set try to set it using the imdb id -->
		<if test="${movie.site_id}=">
			<if test="${movie.imdb_id}!=">
				<set name="movie.site_id" value="${movie.imdb_id}" />
			</if>
		</if>
		
		<!-- if we have a site id (imdb id) we can continue -->
		<if test="${movie.site_id}!=">

			<!-- Retrieve details -->
			<retrieve name="details_page" url="http://www.imdb.com/title/${movie.site_id}/" />

			<!-- Get cover directly by manipulating details page thumbnail -->
			<set name="rx_cover">
				<![CDATA[
				<a\s*onclick="[^>]+><img.+?src="([^@]+@@._V1)\.[^\.]+([^"]+)"\s*?style=".+"\s*?height=".+"\s*?alt=".+\sPoster"
				]]>
			</set>
			<parse name="cover_src" input="${details_page}" regex="${rx_cover}" />

			<!-- set cover -->
			<set name="cover_art[0].url" value="${cover_src[0][0]}${cover_src[1][0]}" />
		</if>
	</action>
</ScriptableScraper>